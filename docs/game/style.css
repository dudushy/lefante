:root {
  --responsiveUnit: calc(1vmin + 1vmax);
  --dynamicHeight: 100vh;

  --wall: #475F83;

  --primary: #3880ff;
  --secondary: #3dc2ff;
  --tertiary: #5260ff;
  --success: #2dd36f;
  --warning: #ffc409;
  --danger: #eb445a;
  --dark: #222428;
  --medium: #92949c;
  --light: #f4f5f8;
  --black: #000000;
  --white: #ffffff;

  --headerHeight: calc(var(--responsiveUnit) * 4);
  --footerHeight: calc(var(--responsiveUnit) * 2);
  --mainHeight: calc(var(--dynamicHeight) - var(--headerHeight) - var(--footerHeight));
}

@media (orientation: portrait) {
  :root {
    --headerHeight: calc(var(--responsiveUnit) * 6);
    --footerHeight: calc(var(--responsiveUnit) * 4);
  }
}

@supports (height: 100dvh) {
  :root {
    --dynamicHeight: 100dvh;
  }
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  min-height: 0;
  min-width: 0;
}

html,
body {
  height: var(--dynamicHeight);
  overflow: hidden;
}

body {
  display: flex;
  flex-direction: column;
  color: var(--white);
  background-color: var(--wall);
  text-align: center;
  font-family: sans-serif;
}

body[theme="dark"] {
  color: var(--black);
}

header,
footer {
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

header {
  /* background: red; */
  min-height: var(--headerHeight);
  justify-content: center;
}

header img {
  height: calc(var(--responsiveUnit) * 3.5);
  object-fit: cover;
  margin-right: calc(var(--responsiveUnit) * 1);
  padding-bottom: calc(var(--responsiveUnit) * 0.25);
}

body[theme="dark"] header img {
  filter: invert(1);
}

header a {
  text-decoration: none;
  color: var(--white);
  font-weight: bolder;
  font-size: calc(var(--responsiveUnit) * 3);
}

body[theme="dark"] header a {
  color: var(--black);
}

@media (orientation: portrait) {
  header img {
    height: calc(var(--responsiveUnit) * 5.5);
    margin-right: calc(var(--responsiveUnit) * 1);
    padding-bottom: calc(var(--responsiveUnit) * 0.75);
  }

  header a {
    font-size: calc(var(--responsiveUnit) * 4);
  }
}

footer {
  /* background: red; */
  min-height: var(--footerHeight);
  justify-content: space-between;
}

footer h2 {
  font-size: calc(var(--responsiveUnit) * 1);
}

footer h2:first-child {
  margin-left: calc(var(--responsiveUnit) * 1);
}

footer h2:last-child {
  margin-right: calc(var(--responsiveUnit) * 1);
}

footer h2 a {
  color: var(--white);
}

body[theme="dark"] footer h2 a {
  color: var(--black);
}

footer h2 span#heart {
  color: var(--danger);
}

@media (orientation: portrait) {
  footer h2 {
    font-size: calc(var(--responsiveUnit) * 1.75);
  }
}

main {
  /* background: red; */
  min-height: var(--mainHeight);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  overflow: auto;
}

main .game-header {
  display: flex;
  align-items: center;
  justify-content: center;
  border-top: calc(var(--responsiveUnit) * 0.25) solid var(--light);
  padding-inline: calc(var(--responsiveUnit) * 2);
}

body[theme="dark"] main .game-header {
  border-top: calc(var(--responsiveUnit) * 0.25) solid var(--dark);
}

main .game-header .backButton {
  margin-right: calc(var(--responsiveUnit) * 2);
}

main .game-header .backButton img {
  height: calc(var(--responsiveUnit) * 2.5);
  object-fit: cover;
  filter: invert(1);
}

body[theme="dark"] main .game-header .backButton img {
  filter: invert(0);
}

main .game-header h1 {
  font-size: calc(var(--responsiveUnit) * 2.5);
  color: var(--white);
}

body[theme="dark"] main .game-header h1 {
  color: var(--black);
}

main .game-header .lifeDisplay {
  --heartColor: #ff0000;

  margin-left: calc(var(--responsiveUnit) * 1.5);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: calc(var(--responsiveUnit) * 1.5);
  margin-top: calc(var(--responsiveUnit) * 0.5);
}

main .game-header .lifeDisplay p {
  margin: 0;
  color: var(--heartColor);
  font-size: calc(var(--responsiveUnit) * 2);
  margin-bottom: calc(var(--responsiveUnit) * 0.5);
}

main .game-header .lifeDisplay p#life-count {
  color: var(--white);
  font-weight: bolder;
}

body[theme="dark"] main .game-header .lifeDisplay p#life-count {
  color: var(--black);
}

main .game-content {
  background: red;
  position: relative;
  margin-top: calc(var(--responsiveUnit) * 0.5);
  width: 98%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: space-around;
  flex-wrap: wrap;
  flex-direction: column;
  gap: calc(var(--responsiveUnit) * 2);
}

main .game-content .card-box {
  background: blue;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: calc(var(--responsiveUnit) * 5);
  height: calc(var(--responsiveUnit) * 6);
  padding: calc(var(--responsiveUnit) * 2);
  gap: calc(var(--responsiveUnit) * 2);
}

main .game-content .card-box .card {
  position: absolute;
  top: var(--top-offset);
  left: var(--left-offset);
  transform: rotate(var(--rotation-offset));
  perspective: calc(var(--responsiveUnit) * 10);
  width: 90%;
  height: 90%;
}

main .game-content .card-box.sample {
  position: absolute;
  top: 50%;
  left: 50%;
}

main .game-content .card-box.sample .card {
  opacity: 0.5;
  /* display: none; */
}

main .game-content .card-box.sample .card:active .card-inner {
  transform: rotateY(180deg) scale(0.9);
}

main .game-content .card-box.flipped .card .card-inner {
  transform: rotateY(180deg);
}

main .game-content .card-box.matched .card .card-inner {
  opacity: 0;
  transform: rotateY(180deg) scale(0.9);
  pointer-events: none;
  cursor: none;
  transition: all 1s;
}

main .game-content .card-box .card .card-inner {
  height: 100%;
  width: 100%;
  transform-style: preserve-3d;
  border-radius: calc(var(--responsiveUnit) * 1);
  transition: all 0.5s;
  user-select: none;
}

main .game-content .card-box .card:hover .card-inner {
  cursor: pointer;
}

body[theme="dark"] main .game-content .card-box .card .card-inner .card-front img {
  filter: invert(1);
}

main .game-content .card-box .card .card-inner .card-front,
main .game-content .card-box .card .card-inner .card-back {
  width: 100%;
  height: 100%;
  position: absolute;
  backface-visibility: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: calc(var(--responsiveUnit) * 2);
  color: var(--black);
  background: var(--white);
  border: calc(var(--responsiveUnit) * 0.5) solid var(--black);
  border-radius: calc(var(--responsiveUnit) * 1);
  user-select: none;
}

body[theme="dark"] main .game-content .card-box .card .card-inner .card-front,
body[theme="dark"] main .game-content .card-box .card .card-inner .card-back {
  color: var(--white);
  background: var(--black);
  border: calc(var(--responsiveUnit) * 0.5) solid var(--white);
}

main .game-content .card-box .card .card-inner .card-back {
  transform: rotateY(180deg);
}

@media (orientation: portrait) {
  main .game-header {
    border-top: calc(var(--responsiveUnit) * 0.25) solid var(--white);
    padding-inline: calc(var(--responsiveUnit) * 4);
  }

  body[theme="dark"] main .game-header {
    border-top: calc(var(--responsiveUnit) * 0.25) solid var(--black);
  }

  main .game-header a {
    margin-right: calc(var(--responsiveUnit) * 2);
  }

  main .game-header a img {
    height: calc(var(--responsiveUnit) * 2.5);
  }

  main .game-header h1 {
    font-size: calc(var(--responsiveUnit) * 2.5);
  }

  main .game-content {
    margin-top: calc(var(--responsiveUnit) * 0.5);
    width: 98%;
    height: 100%;
  }

  main .game-content .card {
    perspective: calc(var(--responsiveUnit) * 10);
    width: calc(var(--responsiveUnit) * 5);
    height: calc(var(--responsiveUnit) * 6);
  }

  main .game-content .card .card-inner {
    border-radius: calc(var(--responsiveUnit) * 1);
  }

  main .game-content .card .card-inner .card-front,
  main .game-content .card .card-inner .card-back {
    font-size: calc(var(--responsiveUnit) * 2);
    border: calc(var(--responsiveUnit) * 0.5) solid var(--black);
    border-radius: calc(var(--responsiveUnit) * 1);
  }

  body[theme="dark"] main .game-content .card .card-inner .card-front,
  body[theme="dark"] main .game-content .card .card-inner .card-back {
    border: calc(var(--responsiveUnit) * 0.5) solid var(--white);
  }
}
